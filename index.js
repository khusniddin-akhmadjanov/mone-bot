const { Telegraf } = require("telegraf");
const axios = require("axios");
require("dotenv").config();

const bot = new Telegraf(process.env.BOT_TOKEN);
const backendApi = process.env.API;

bot.start((ctx) => {
  ctx.replyWithHTML(
    `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ <b>${ctx.from.username}</b>! \n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç`,
    {
      reply_markup: {
        keyboard: [["–ú–µ–Ω—é", "–ö–æ–Ω—Ç–∞–∫—Ç"], ["–ó–∞–∫–∞–∑", "–ñ–∞–ª–æ–±–∞"], ["–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"]],
        resize_keyboard: true,
      },
    }
  );
});
let lastMessage = ""; // store the user's previous message

bot.hears("–ñ–∞–ª–æ–±–∞", (ctx) => {
  ctx.reply("–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ—é –∂–∞–ª–æ–±—É –∑–¥–µ—Å—å");
  lastMessage = "–ñ–∞–ª–æ–±–∞";
});

bot.hears("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", (ctx) => {
  ctx.reply("–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∑–¥–µ—Å—å");
  lastMessage = "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è";
});

bot.on("text", (ctx) => {
  if (lastMessage === "–ñ–∞–ª–æ–±–∞") {
    // send the complaint to the admin panel via API
    axios
      .post(`${backendApi}/complaint/add`, {
        username: ctx.from.username,
        description: ctx.message.text,
      })
      .then(() => {
        ctx.reply("–í–∞—à–∞ –∂–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞");
      })
      .catch((err) => {
        console.log(err);
        ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∂–∞–ª–æ–±—ã");
      });
  } else if (lastMessage === "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è") {
    // send the offer to the API
    axios
      .post(`${backendApi}/suggestion/add`, {
        username: ctx.from.username,
        suggestion: ctx.message.text,
      })
      .then(() => {
        ctx.reply("–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");
      })
      .catch((err) => {
        console.log(err);
        ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è");
      });
  }
});

bot.hears("–ö–æ–Ω—Ç–∞–∫—Ç", async (ctx) => {
  await ctx.reply("–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏", {
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: "Telegram",
            url: "https://t.me/monecafebakery",
          },
          {
            text: "–ê–¥—Ä–µ—Å",
            callback_data: "location",
          },
        ],
        [
          {
            text: "Instagram",
            url: "https://www.instagram.com/monebakery.uz/",
          },
          {
            text: "Facebook",
            url: "https://www.facebook.com/MoneBakery.UZ",
          },
        ],
        [
          {
            text: "+998 98 888 00 55",
            callback_data: "tel:+998 98 888 00 55",
          },
        ],
      ],
    },
  });
});

bot.hears("–ù–∞–∑–∞–¥", (ctx) => {
  ctx.reply("–≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏–∑ –º–µ–Ω—é", {
    reply_markup: {
      keyboard: [["–ú–µ–Ω—é", "–ö–æ–Ω—Ç–∞–∫—Ç"], ["–ó–∞–∫–∞–∑", "–ñ–∞–ª–æ–±–∞"], ["–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"]],
      resize_keyboard: true,
    },
  });
});

bot.hears("–ú–µ–Ω—é", async (ctx) => {
  try {
    await ctx.replyWithChatAction("typing");
    const res = await axios.get(`${backendApi}/category`);
    const categoryList = res.data.map((category) => {
      return [
        {
          text: category.parent,
          url: category.url,
        },
      ];
    });
    await ctx.reply("–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π üëá", {
      reply_markup: {
        inline_keyboard: categoryList,
      },
    });
  } catch (err) {
    console.log(err);
  }
});

bot.hears("–ó–∞–∫–∞–∑", (ctx) => {
  // order with phone or telegram account
  ctx.replyWithHTML(
    "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –≤ üëá: \n \n–¢–µ–ª–µ—Ñ–æ–Ω : üìû <b>+998 98 888 00 55</b> \n\nM–µ–Ω–µ–¥–∂–µ—Ä : <b>@Salesmanager_mone</b>"
  );
});

bot.action("location", (ctx) => {
  // send our branches two location
  ctx.replyWithHTML(
    "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å –Ω–∞—à–∏ —Ñ–∏–ª–∏–∞–ª—ã —Å 7:00 –¥–æ 23:00. –í—Å–µ —Ñ–∏–ª–∏–∞–ª—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å",
    {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "–î–∞—Ö–±–µ—Ç 25-–ê",
              callback_data: "branch1",
            },
          ],
          [
            {
              text: "–û—Ä–∑—É –ú–∞—Ö–º—É–¥–æ–≤–∞ 12 –¥–æ–º",
              callback_data: "branch2",
            },
          ],
          [
            {
              text: "–ë—É—é–∫ –ò–ø–∞–∫ –π—É–ª–∏ 72 –¥–æ–º",
              callback_data: "branch3",
            },
          ],
        ],
      },
    }
  );
});

bot.action("branch1", (ctx) => {
  // send location of branch 1
  ctx.replyWithLocation(39.673365, 66.969126);
});

bot.action("branch2", (ctx) => {
  // send location of branch 2 with link
  ctx.replyWithLocation(39.644942, 66.951527);
});

bot.action("branch3", (ctx) => {
  // send location of branch 3
  ctx.replyWithLocation(39.644823, 66.954632);
});

bot.launch();
