const { Telegraf } = require("telegraf");
require("dotenv").config();
const axios = require("axios");

const bot = new Telegraf(process.env.BOT_TOKEN);
const backendApi = process.env.BACKEND_API;

const categories = [];
const categoriesKeyboard = [];
const categoriesName = [];
const products = [];
const activeCategory = {};

// get categories from backend

axios
  .get(`${backendApi}/category`)
  .then((res) => {
    res.data.forEach((category) => {
      categories.push(category);
    });

    for (let i = 0; i < categories.length / 2; i++) {
      categoriesKeyboard.push([
        categories[i].parent,
        categories[categories.length / 2 + i].parent,
      ]);
    }

    categories.map((category) => {
      categoriesName.push(category.parent.trim());
    });

    categoriesKeyboard.push(["–ù–∞–∑–∞–¥"]);
  })
  .catch((err) => console.log(err));

axios
  .get(`${backendApi}/products`)
  .then((res) => {
    res.data.products.forEach((product) => {
      products.push(product);
    });
  })
  .catch((err) => console.log(err));

bot.start((ctx) => {
  ctx.replyWithHTML(
    `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ ${ctx.from.username}! \n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç
 \n\n–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏
 \n\n<b>Telegram</b> : @mone_cafe \n\n<b>Instagram</b> : @mone_cafe \n\n<b>Facebook</b> : @mone_cafe`,
    {
      reply_markup: {
        keyboard: [["–ú–µ–Ω—é", "–ö–æ–Ω—Ç–∞–∫—Ç"], ["–ó–∞–∫–∞–∑"]],
        resize_keyboard: true,
      },
    }
  );
});

bot.hears("–ö–æ–Ω—Ç–∞–∫—Ç", (ctx) => {
  ctx.reply("–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏", {
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: "Telegram",
            url: "https://t.me/uzbekistan",
          },
          {
            text: "–ê–¥—Ä–µ—Å",
            callback_data: "location",
          },
        ],
        [
          {
            text: "Instagram",
            url: "https://www.instagram.com/uzbekistan/",
          },
          {
            text: "Facebook",
            url: "https://www.facebook.com/uzbekistan/",
          },
        ],
        [
          {
            text: "+998 98 888 00 55",
            callback_data: "tel:+998 98 888 00 55",
          },
        ],
      ],
    },
  });
});

bot.hears("–ù–∞–∑–∞–¥", (ctx) => {
  ctx.reply("Welcome to the bot", {
    reply_markup: {
      keyboard: [["–ú–µ–Ω—é", "–ö–æ–Ω—Ç–∞–∫—Ç"], ["–ó–∞–∫–∞–∑"]],
      resize_keyboard: true,
    },
  });
});

bot.hears("–ú–µ–Ω—é", (ctx) => {
  // reply with text and inline_keyboard categoriesKeyboard
  ctx.reply("–í—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã —á–µ—Ä–µ–∑ —ç—Ç–∏ –∫–∞–Ω–∞–ª—ã üëá", {
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: "–î–µ—Ç—Å–∫–∏–µ",
            url: "https://t.me/mone_cake_kids",
          },
          {
            text: "–Æ–±–∏–ª–µ–π–Ω—ã–µ —Ç–æ—Ä–∂–µ—Å—Ç–≤–∞",
            url: "https://t.me/mone_cake_anniversary",
          },
        ],
        [
          {
            text: "–î–ª—è –∂–µ–Ω—â–∏–Ω",
            url: "https://t.me/mone_cake_women",
          },
          {
            text: "–î–ª—è –º—É–∂—á–∏–Ω",
            url: "https://t.me/mone_cake_man",
          },
        ],
        [
          {
            text: "–°–≤–∞–¥–µ–±–Ω—ã–π",
            url: "https://t.me/mone_cake_wedding",
          },
          {
            text: "–ö–∞–Ω–¥–∏ —Ç–æ—Ä—Ç—ã",
            url: "https://t.me/mone_cake_kandy",
          },
        ],
        [
          {
            text: "–î–µ–Ω—å –≤–ª—é–±–ª—ë–Ω–Ω—ã—Ö",
            url: "https://t.me/+Bhb9G8yUxcA1YmQy",
          },
          {
            text: "–ù–æ–≤–æ–≥–æ–¥–Ω–∏–µ",
            url: "https://t.me/+c6Aa4vDbWdxhMTBi",
          },
        ],
      ],
    },
  });
});

bot.hears("–ù–∞–∑–∞–¥ –ú–µ–Ω—é", (ctx) => {
  ctx.reply("Choose a category", {
    reply_markup: {
      keyboard: categoriesKeyboard,
      resize_keyboard: true,
    },
  });
});

bot.hears("–ó–∞–∫–∞–∑", (ctx) => {
  // order with phone or telegram account
  ctx.replyWithHTML(
    "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –≤ üëá: \n \n–¢–µ–ª–µ—Ñ–æ–Ω : üìû <b>+998 98 888 00 55</b> \n\nM–µ–Ω–µ–¥–∂–µ—Ä : <b>@Salesmanager_mone</b>",
    {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "–ê–¥—Ä–µ—Å",
              callback_data: "location",
            },
          ],
        ],
      },
    }
  );
});

bot.action("location", (ctx) => {
  // send our branches two location
  ctx.replyWithHTML(
    "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å –Ω–∞—à–∏ —Ñ–∏–ª–∏–∞–ª—ã —Å 8:00 –¥–æ 18:00. –í—Å–µ —Ñ–∏–ª–∏–∞–ª—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å",
    {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "–î–∞—Ö–±–µ—Ç 25-–ê",
              callback_data: "branch1",
            },
          ],
          [
            {
              text: "–û—Ä–∑—É –ú–∞—Ö–º—É–¥–æ–≤–∞ 12 –¥–æ–º",
              callback_data: "branch2",
            },
          ],
          [
            {
              text: "–ë—É—é–∫ –ò–ø–∞–∫ –π—É–ª–∏ 72 –¥–æ–º",
              callback_data: "branch3",
            },
          ],
        ],
      },
    }
  );
});

bot.action("branch1", (ctx) => {
  // send location of branch 1
  ctx.replyWithLocation(41.311081, 69.240562);
});

bot.action("branch2", (ctx) => {
  // send location of branch 2
  ctx.replyWithLocation(41.311081, 69.240562);
});

bot.action("branch3", (ctx) => {
  // send location of branch 3
  ctx.replyWithLocation(41.311081, 69.240562);
});

bot.action("menu", (ctx) => {
  // go to telegram channel
  ctx.replyWithHTML("–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—à–µ –º–µ–Ω—é –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ üëá", {
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: "–ö–∞–Ω–∞–ª",
            url: "https://t.me/uzbekistan",
          },
        ],
      ],
    },
  });
});

bot.on("message", (ctx) => {
  if (
    categoriesName.includes(ctx.message.text) &&
    products.filter((product) => product.parent === ctx.message.text).length > 0
  ) {
    activeCategory.name = ctx.message.text;

    products.filter((product) => product.parent === ctx.message.text).length > 5
      ? ctx.reply("0-5 —Ç–æ—Ä—Ç—ã", {
          reply_markup: {
            keyboard: [["–ù–∞–∑–∞–¥ –ú–µ–Ω—é", "5-10"]],
            resize_keyboard: true,
          },
        })
      : ctx.reply("–î—Ä—É–≥–∏—Ö —Ñ–æ—Ç–æ –≤ —ç—Ç–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üòû", {
          reply_markup: {
            keyboard: [["–ù–∞–∑–∞–¥ –ú–µ–Ω—é"]],
            resize_keyboard: true,
          },
        });

    products
      .filter((product) => product.parent === ctx.message.text)
      .forEach((product, index) => {
        if (index < 5) {
          // send photo with inline keyboard
          ctx.replyWithPhoto(product.image, {
            caption: `#${product.parent} - ${product.title}`,
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: "–ó–∞–∫–∞–∑–∞—Ç—å",
                    url: "https://t.me/Salesmanager_mone",
                  },
                ],
              ],
            },
          });
        }
      });
  } else if (ctx.message.text === "5-10") {
    products.filter((product) => product.parent === activeCategory.name)
      .length > 10
      ? ctx.reply("5-10 —Ç–æ—Ä—Ç—ã", {
          reply_markup: {
            keyboard: [["–ù–∞–∑–∞–¥ –ú–µ–Ω—é", "10-15"]],
            resize_keyboard: true,
          },
        })
      : ctx.reply("–î—Ä—É–≥–∏—Ö —Ñ–æ—Ç–æ –≤ —ç—Ç–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üòû", {
          reply_markup: {
            keyboard: [["–ù–∞–∑–∞–¥ –ú–µ–Ω—é"]],
            resize_keyboard: true,
          },
        });

    products.map((product, index) => {
      if (index > 4 && index < 10 && product.parent === activeCategory.name) {
        ctx.replyWithPhoto(product.image, {
          caption: `#${product.parent} - ${product.title}`,
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "–ó–∞–∫–∞–∑–∞—Ç—å",
                  url: "https://t.me/Salesmanager_mone",
                },
              ],
            ],
          },
        });
      }
    });
  } else if (ctx.message.text === "10-15") {
    products.filter((product) => product.parent === activeCategory.name)
      .length > 15
      ? ctx.reply("10-15 —Ç–æ—Ä—Ç—ã", {
          reply_markup: {
            keyboard: [["–ù–∞–∑–∞–¥ –ú–µ–Ω—é", "15-20"]],
            resize_keyboard: true,
          },
        })
      : ctx.reply("–î—Ä—É–≥–∏—Ö —Ñ–æ—Ç–æ –≤ —ç—Ç–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üòû", {
          reply_markup: {
            keyboard: [["–ù–∞–∑–∞–¥ –ú–µ–Ω—é"]],
            resize_keyboard: true,
          },
        });

    products.forEach((product, index) => {
      if (index > 9 && index < 15 && product.parent === activeCategory.name) {
        ctx.replyWithPhoto(product.image, {
          caption: `#${product.parent} - ${product.title}`,
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "–ó–∞–∫–∞–∑–∞—Ç—å",
                  url: "https://t.me/Salesmanager_mone",
                },
              ],
            ],
          },
        });
      }
    });
  } else if (ctx.message.text === "15-20") {
    products.filter((product) => product.parent === activeCategory.name)
      .length > 20
      ? ctx.reply("15-20 —Ç–æ—Ä—Ç—ã", {
          reply_markup: {
            keyboard: [["–ù–∞–∑–∞–¥ –ú–µ–Ω—é", "20-25"]],
            resize_keyboard: true,
          },
        })
      : ctx.reply("–î—Ä—É–≥–∏—Ö —Ñ–æ—Ç–æ –≤ —ç—Ç–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üòû", {
          reply_markup: {
            keyboard: [["–ù–∞–∑–∞–¥ –ú–µ–Ω—é"]],
            resize_keyboard: true,
          },
        });

    products.forEach((product, index) => {
      if (index > 14 && index < 20 && product.parent === activeCategory.name) {
        ctx.replyWithPhoto(product.image, {
          caption: `#${product.parent} - ${product.title}`,
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "–ó–∞–∫–∞–∑–∞—Ç—å",
                  url: "https://t.me/Salesmanager_mone",
                },
              ],
            ],
          },
        });
      }
    });
  } else if (ctx.message.text === "20-25") {
    products.filter((product) => product.parent === activeCategory.name)
      .length > 25
      ? ctx.reply("20-25 —Ç–æ—Ä—Ç—ã", {
          reply_markup: {
            keyboard: [["–ù–∞–∑–∞–¥ –ú–µ–Ω—é", "25-30"]],
            resize_keyboard: true,
          },
        })
      : ctx.reply("–î—Ä—É–≥–∏—Ö —Ñ–æ—Ç–æ –≤ —ç—Ç–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üòû", {
          reply_markup: {
            keyboard: [["–ù–∞–∑–∞–¥ –ú–µ–Ω—é"]],
            resize_keyboard: true,
          },
        });

    products.forEach((product, index) => {
      if (index > 19 && index < 25 && product.parent === activeCategory.name) {
        ctx.replyWithPhoto(product.image, {
          caption: `#${product.parent} - ${product.title}`,
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "–ó–∞–∫–∞–∑–∞—Ç—å",
                  url: "https://t.me/Salesmanager_mone",
                },
              ],
            ],
          },
        });
      }
    });
  } else if (ctx.message.text === "25-30") {
    products.filter((product) => product.parent === activeCategory.name)
      .length > 30
      ? ctx.reply("25-30 —Ç–æ—Ä—Ç—ã", {
          reply_markup: {
            keyboard: [["–ù–∞–∑–∞–¥ –ú–µ–Ω—é", "30-35"]],
            resize_keyboard: true,
          },
        })
      : ctx.reply("–î—Ä—É–≥–∏—Ö —Ñ–æ—Ç–æ –≤ —ç—Ç–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üòû", {
          reply_markup: {
            keyboard: [["–ù–∞–∑–∞–¥ –ú–µ–Ω—é"]],
            resize_keyboard: true,
          },
        });

    products.forEach((product, index) => {
      if (index > 24 && index < 30 && product.parent === activeCategory.name) {
        ctx.replyWithPhoto(product.image, {
          caption: `#${product.parent} - ${product.title}`,
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "–ó–∞–∫–∞–∑–∞—Ç—å",
                  url: "https://t.me/Salesmanager_mone",
                },
              ],
            ],
          },
        });
      }
    });
  } else if (ctx.message.text === "30-35") {
    products.filter((product) => product.parent === activeCategory.name)
      .length > 35
      ? ctx.reply("30-35 —Ç–æ—Ä—Ç—ã", {
          reply_markup: {
            keyboard: [["–ù–∞–∑–∞–¥ –ú–µ–Ω—é", "35-40"]],
            resize_keyboard: true,
          },
        })
      : ctx.reply("–î—Ä—É–≥–∏—Ö —Ñ–æ—Ç–æ –≤ —ç—Ç–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üòû", {
          reply_markup: {
            keyboard: [["–ù–∞–∑–∞–¥ –ú–µ–Ω—é"]],
            resize_keyboard: true,
          },
        });

    products.forEach((product, index) => {
      if (index > 29 && index < 35 && product.parent === activeCategory.name) {
        ctx.replyWithPhoto(product.image, {
          caption: `#${product.parent} - ${product.title}`,
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "–ó–∞–∫–∞–∑–∞—Ç—å",
                  url: "https://t.me/Salesmanager_mone",
                },
              ],
            ],
          },
        });
      }
    });
  } else {
    ctx.reply("–î—Ä—É–≥–∏—Ö —Ñ–æ—Ç–æ –≤ —ç—Ç–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üòû");
  }
});

bot.launch();
